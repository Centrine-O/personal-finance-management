<?php

namespace App\Notifications;

use Illuminate\Auth\Notifications\ResetPassword as ResetPasswordBase;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;

/**
 * Custom Password Reset Notification
 * 
 * This class extends Laravel's default password reset notification
 * to provide enhanced security messaging and custom branding for
 * our personal finance application.
 * 
 * Security considerations for financial applications:
 * - Clear warning about phishing attempts
 * - Time-limited reset links (60 minutes)
 * - Instructions for users who didn't request the reset
 * - Contact information for security concerns
 * - Clear action button and fallback text link
 * 
 * Why we customize this:
 * - Financial apps require extra security awareness
 * - Users need clear instructions for security
 * - Custom branding builds trust and recognition
 * - Better user experience with clear next steps
 */
class CustomResetPassword extends ResetPasswordBase implements ShouldQueue
{
    use Queueable;

    /**
     * The password reset token.
     * 
     * This token is generated by Laravel and is cryptographically secure
     * It's used to verify that the user is authorized to reset their password
     */
    public $token;

    /**
     * The queue configuration for better email delivery performance
     */
    public $connection = 'redis';
    public $queue = 'emails';

    /**
     * Create a new notification instance.
     * 
     * @param string $token The password reset token
     */
    public function __construct(string $token)
    {
        $this->token = $token;
    }

    /**
     * Build the mail representation of the notification.
     * 
     * This creates the email that users receive when they request
     * a password reset for their financial account.
     * 
     * @param mixed $notifiable The user receiving the notification
     * @return \Illuminate\Notifications\Messages\MailMessage
     */
    public function toMail($notifiable): MailMessage
    {
        // Generate the password reset URL with the token
        // This URL includes the token and email for verification
        $resetUrl = url(route('password.reset', [
            'token' => $this->token,
            'email' => $notifiable->getEmailForPasswordReset(),
        ], false));

        // Calculate when the reset link expires
        // Default is 60 minutes as configured in auth.php
        $expireTime = config('auth.passwords.users.expire', 60);

        return (new MailMessage)
            // Clear, urgent subject line for security
            ->subject('Reset Your Password - ' . config('app.name'))
            
            // High priority for security-related emails
            ->priority(1)
            
            // Use custom email template
            ->view('emails.auth.reset-password', [
                'user' => $notifiable,
                'resetUrl' => $resetUrl,
                'token' => $this->token,
                'appName' => config('app.name'),
                'expireMinutes' => $expireTime,
                'supportEmail' => config('mail.support_address', 'support@' . config('app.domain')),
                'securityEmail' => config('mail.security_address', 'security@' . config('app.domain')),
            ])
            
            // Plain text version for email clients that don't support HTML
            ->text('emails.auth.reset-password-text', [
                'user' => $notifiable,
                'resetUrl' => $resetUrl,
                'appName' => config('app.name'),
                'expireMinutes' => $expireTime,
            ]);
    }

    /**
     * Get the notification's delivery channels.
     * 
     * Password reset should only be sent via email for security
     * 
     * @param mixed $notifiable
     * @return array
     */
    public function via($notifiable): array
    {
        return ['mail'];
    }

    /**
     * Get the array representation of the notification.
     * 
     * This could be used for database storage or API responses
     * 
     * @param mixed $notifiable
     * @return array
     */
    public function toArray($notifiable): array
    {
        return [
            'type' => 'password_reset',
            'message' => 'Password reset requested for your account',
            'expires_at' => now()->addMinutes(config('auth.passwords.users.expire', 60)),
            'requested_at' => now(),
        ];
    }

    /**
     * Determine the time at which the job should timeout.
     * 
     * Password reset emails are security-critical and should be sent quickly
     */
    public function retryUntil(): \DateTime
    {
        return now()->addMinutes(5);
    }

    /**
     * Calculate the number of seconds to wait before retrying the job.
     * 
     * Quick retries for critical security emails
     */
    public function backoff(): array
    {
        return [1, 3, 5]; // Retry after 1s, then 3s, then 5s
    }

    /**
     * Handle a job failure.
     * 
     * Password reset email failures are serious security issues
     * that need immediate attention
     */
    public function failed(\Throwable $exception): void
    {
        // Log the critical failure
        \Illuminate\Support\Facades\Log::critical('Password reset email failed', [
            'user_email' => $this->getRecipientEmail(),
            'token' => substr($this->token, 0, 10) . '...', // Partial token for debugging
            'exception' => $exception->getMessage(),
            'trace' => $exception->getTraceAsString(),
        ]);

        // This is critical - consider alerting administrators immediately
        // In production, you might want to:
        // - Send SMS to user as backup
        // - Alert security team
        // - Try alternative email delivery service
    }

    /**
     * Get the recipient's email address for logging purposes.
     * 
     * @return string
     */
    private function getRecipientEmail(): string
    {
        // This is a helper method to safely get email for logging
        // without exposing the full notifiable object
        return 'email_unavailable';
    }
}