# Production Docker Compose configuration
# This version is optimized for production deployment
# Key differences: no debug tools, optimized settings, secure configurations

version: '3.8'

services:
  
  # Production Laravel application
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
      # Production build arguments
      args:
        - APP_ENV=production
    
    container_name: finance_app_prod
    restart: always  # Always restart in production
    
    working_dir: /var/www/html
    
    # Optimized volume mounts for production
    volumes:
      # Only mount necessary directories in production
      - .:/var/www/html:ro  # Read-only mount for security
      # Separate writable volumes for storage and cache
      - storage_data:/var/www/html/storage
      - cache_data:/var/www/html/bootstrap/cache
    
    ports:
      - "80:80"  # Standard HTTP port in production
    
    # Production environment variables
    environment:
      # Laravel environment
      - APP_ENV=production
      - APP_DEBUG=false  # Never enable debug in production
      
      # Database settings
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=personal_finance_db
      - DB_USERNAME=finance_user
      - DB_PASSWORD=${DB_PASSWORD}  # Use environment variable for security
      
      # Redis settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # Mail settings (use real SMTP in production)
      - MAIL_MAILER=smtp
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_ENCRYPTION=tls
      
      # Session and cache drivers
      - SESSION_DRIVER=redis
      - CACHE_DRIVER=redis
      - QUEUE_CONNECTION=redis
    
    depends_on:
      - mysql
      - redis
    
    networks:
      - finance_network
    
    # Production health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Production MySQL with optimization
  mysql:
    image: mysql:8.0
    container_name: finance_mysql_prod
    restart: always
    
    environment:
      # Use environment variables for passwords in production
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=personal_finance_db
      - MYSQL_USER=finance_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
    
    volumes:
      # Persistent data volume
      - mysql_prod_data:/var/lib/mysql
      # Production MySQL configuration
      - ./docker/mysql/prod.cnf:/etc/mysql/conf.d/production.cnf
    
    # Don't expose ports in production (only internal access)
    # ports: []
    
    # Production MySQL settings
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=256M
      --max-connections=200
      --slow-query-log=1
      --slow-query-log-file=/var/lib/mysql/slow.log
      --long-query-time=2
    
    networks:
      - finance_network

  # Production Redis with persistence
  redis:
    image: redis:7-alpine
    container_name: finance_redis_prod
    restart: always
    
    volumes:
      - redis_prod_data:/data
      # Redis production configuration
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    
    # Don't expose ports in production
    # ports: []
    
    # Production Redis command with config file
    command: redis-server /usr/local/etc/redis/redis.conf
    
    networks:
      - finance_network

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: finance_nginx_prod
    restart: always
    
    ports:
      - "80:80"
      - "443:443"  # HTTPS port
    
    volumes:
      # Nginx configuration
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf
      # SSL certificates (you'll need to add these)
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      # Static files
      - ./public:/var/www/html/public:ro
    
    depends_on:
      - app
    
    networks:
      - finance_network

# Production networks with custom settings
networks:
  finance_network:
    driver: bridge
    # Production network settings
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Production volumes with backup considerations
volumes:
  mysql_prod_data:
    driver: local
    # You can configure external storage here for backups
    
  redis_prod_data:
    driver: local
    
  storage_data:
    driver: local
    
  cache_data:
    driver: local